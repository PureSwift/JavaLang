// Auto-generated by Java-to-Swift wrapper generator.
import JavaIO
import JavaKit
import JavaKitIO
import JavaRuntime

@JavaClass("java.lang.Process")
open class Process: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func destroyForcibly() -> Process!

  @JavaMethod
  open func supportsNormalTermination() -> Bool

  @JavaMethod
  open func inputReader(_ arg0: Charset?) -> BufferedReader!

  @JavaMethod
  open func inputReader() -> BufferedReader!

  @JavaMethod
  open func errorReader() -> BufferedReader!

  @JavaMethod
  open func errorReader(_ arg0: Charset?) -> BufferedReader!

  @JavaMethod
  open func outputWriter(_ arg0: Charset?) -> BufferedWriter!

  @JavaMethod
  open func outputWriter() -> BufferedWriter!

  @JavaMethod
  open func getOutputStream() -> JavaIO.OutputStream!

  @JavaMethod
  open func exitValue() -> Int32

  @JavaMethod
  open func toHandle() -> ProcessHandle!

  @JavaMethod
  open func info() -> ProcessHandle.Info!

  @JavaMethod
  open func isAlive() -> Bool

  @JavaMethod
  open func destroy()

  @JavaMethod
  open func getInputStream() -> JavaIO.InputStream!

  @JavaMethod
  open func pid() -> Int64

  @JavaMethod
  open func getErrorStream() -> JavaIO.InputStream!

  @JavaMethod
  open func waitFor() throws -> Int32
}
